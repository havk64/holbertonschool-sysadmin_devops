#!/usr/bin/env bash
# Management of process/daemons with start, stop restart

DAEMON='manage_my_process'
PIDFILE='/var/run/my_process.pid'

usage()
{
	printf '%s\n' "Usage: ${DAEMON} {start|stop|restart}"
	exit 1
}

if [[ $# -ne 1 ]]
then
	usage
fi

# Create the file to be managed(if the file doesn't exist), make it executable
[[ -e "$DAEMON" ]] || (cat <<\EOF > "$DAEMON" && chmod +x "$DAEMON")
#!/bin/bash
# This script is the "worker" to be managed

PID=$$
PIDFILE='/var/run/my_process.pid'
TMPFILE=/tmp/my_process
echo "$PID" | sudo tee "$PIDFILE" > /dev/null

cleanup()
{
	sudo rm -f "$PIDFILE"
	exit 0
}

trap cleanup 15

init()
{
	while :
	do
		echo 'I am alive!' >> "$TMPFILE"
		sleep 2
	done
}

init
EOF

wait_pidfile()
{
	# If $1 is not set(function called w/o argument) waits for pid file creation
	# When called w/ argument it waits for pid file removal
	[[ -z ${1+x} ]] && TEST="[ -e $PIDFILE ]" || TEST="[ ! -e $PIDFILE ]"
	until $TEST; do :; done
}

start()
{
	# If the process is already running prints msg and exit
	# Otherwise starts it.
	[[ $(pgrep -fxc "bash $DAEMON") -gt 0 ]] && echo "$DAEMON already started" &&
		exit 0

	bash $DAEMON &> /dev/null &
	[[ $? ]] && wait_pidfile || echo "Failed!"
	echo "$DAEMON $1"
}

stop()
{
	[[ $(pgrep -fxc "bash $DAEMON") -lt 1 ]] && echo "$DAEMON not running" &&
		exit 0

	pkill -F "$PIDFILE"
	wait_pidfile 1
	echo "$DAEMON stopped"
}

restart()
{
	pkill -fx "bash $DAEMON"
	wait_pidfile 1
	start "restarted"
}

case "$1" in
	start)
		start "started"
		;;
	stop)
		stop
		;;
	restart)
		restart
		;;
	*)
		usage
		;;
esac

exit
